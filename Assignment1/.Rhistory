x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
class(mtrx)
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10000
vec <- makeVector(x)
class(vec)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mtrx)
mtrx$getsolve()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mx
ms <- solve(mx)
ms
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!class(try(solve(m),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(m)                                     #return the
}
data <- x$get()
m <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(m)         #cahce the result
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mtrx$setsolve(mx)
mtrx$getsolve()
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!class(try(solve(m),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(m)                                     #return the
}
data <- x$get()
m <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(m)         #cahce the result
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mtrx$setsolve(mx)
mtrx$getsolve()
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
mtrx$getsolve()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!class(try(solve(m),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(m)                                     #return the
}
data <- x$get()
m <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(m)         #cahce the result
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mtrx$setsolve(mx)
mtrx$getsolve()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!class(try(solve(m),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(m)                                     #return the
}
data <- x$get()
m <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(m)         #cahce the result
m
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mtrx$setsolve(mx)
mtrx$getsolve()
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
}
debugSource('~/R/datasciencecoursera/ProgrammingAssignment2/test.R')
mx
source('~/.active-rstudio-document')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve       #set the parent variable s
getsolve <- function() s
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!class(try(solve(s),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(s)                                     #return the
}
data <- x$get()
s <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(s)         #cahce the result
s                     #retrun s
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
mtrx$getsolve()
mx <- solve(x)
mtrx$setsolve(mx)
mtrx$getsolve()
mtrx$setsolve(mx)
mtrx$getsolve()
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10000
vec <- makeVector(x)
cachemean(vec)
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10000
vec <- makeVector(x)
cachemean(vec)
vec
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- 1:10000
vec <- makeVector(x)
cachemean(vec)
cachemean(vec)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve       #set the parent variable s
getsolve <- function() s
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(!class(try(solve(s),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(s)                                     #return the
}
data <- x$get()
s <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(s)         #cahce the result
s                     #retrun s
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
cacheSolve(mtrx)
cacheSolve(mtrx)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve       #set the parent variable s
getsolve <- function() s
getevn <- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
## this function solves/inverses a matrix. If the the matrix is already solved it returns the result from cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getsolve()
if(class(try(solve(s),silent=T))=="matrix") {  #this looks to see if the matrix is already solved.
message("already solved")                     #already solved provide a message
return(s)                                     #return the
}
data <- x$get()
s <- solve(data, ...) #solve/inverse the matrix.
x$setsolve(s)         #cahce the result
s                     #retrun s
}
x <- rbind(c(1, -1/4), c(-1/4, 1))
mtrx <- makeCacheMatrix(x)
cacheSolve(mtrx)
cacheSolve(mtrx)
